@using Microsoft.JSInterop
@using System.Text.Json
@using FlatpickrBlazor
@inject IJSRuntime JSRuntime

@if (Options != null && Options.wrap)
{
    <div @ref="container" class="@WrapperCssClass">
        @BeforeInputChilds
        <input type="text" hidden="@Hidden" name="@HtmlName" id="@HtmlId" data-input="@Options.wrap" class="@InputCssClass" />
        @AfterInputChilds
    </div>
}
else
{
    <input type="text" @ref="container" hidden="@Hidden" name="@HtmlName" id="@HtmlId" data-input="@Options?.wrap"  class="@InputCssClass"/>
}


@code {
    [Parameter]
    public string InputCssClass { get; set; }
    [Parameter]
    public string WrapperCssClass { get; set; }
    [Parameter]
    public RenderFragment BeforeInputChilds { get; set; }
    [Parameter]
    public RenderFragment AfterInputChilds { get; set; }
    [Parameter]
    public bool Hidden { get; set; } = false;

    [Parameter]
    public string HtmlName { get; set; }
    [Parameter]
    public string HtmlId { get; set; }

    [Parameter]
    public FlatpickrOptions Options { get; set; }
    [Parameter]
    public FlatpickrPluginOptions PluginOptions { get; set; } = new FlatpickrPluginOptions();

    [Parameter]
    public Action<List<DateTimeOffset>> OnChange { get; set; } = null;
    [Parameter]
    public Action OnCreate { get; set; } = null;

    private FlatpickrJsHelper jsHelper;

    private ElementReference container;

    protected override void OnParametersSet()
    {
        jsHelper = new FlatpickrJsHelper(OnChange, OnCreate);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string optionsStr = JsonSerializer.Serialize<FlatpickrOptions>(Options, new JsonSerializerOptions
            {
                IgnoreNullValues = true
            });
            string pluginStr = JsonSerializer.Serialize<FlatpickrPluginOptions>(PluginOptions, new JsonSerializerOptions
            {
                IgnoreNullValues = false
            });
            await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.create", container, optionsStr, pluginStr, DotNetObjectReference.Create(jsHelper));
        }
    }

    public async Task<DateTimeOffset[]> GetSelectedDatesAsync()
    {
        return await JSRuntime.InvokeAsync<DateTimeOffset[]>("flatpickrblazor.selectedDates", container);
    }

    public List<DateTimeOffset> GetSelectedDates()
    {
        return jsHelper.DateTimes;
    }

    public async Task SetDateAsync(DateTimeOffset date, bool triggerChange = false)
    {
        await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.setDate", container, date, triggerChange, null);
    }

    public async Task SetDateAsync(List<DateTimeOffset> dates, bool triggerChange = false)
    {
        await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.setDates", container, dates, triggerChange, null);
    }

    public async Task SetDateAsync(DateTimeOffset date, bool triggerChange, string dateStrFormat)
    {
        await JSRuntime.InvokeVoidAsync(
                "flatpickrblazor.setDate", container, date, triggerChange, dateStrFormat);
    }
}
